import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    CHOOSING_LANGUAGE,
    CHOOSING_PSYCHOLOGIST,
    CHOOSING_FORMAT,
    CHOOSING_CONSULTATION_MODE,
    ENTER_NAME,
    ENTER_AGE_CLASS,
    CHOOSING_PROBLEM,
    ENTERING_PROBLEM_DETAILS,
    CHOOSING_TIME,
    IN_DIALOGUE,
) = range(10)

class ClientBot:
    def __init__(self):
        self.psychologists = {
            "aidana": {
                "name": {"ru": "–ê–π–¥–∞–Ω–∞ –ö–∞–±–∏–¥—É–ª–ª–∞–µ–≤–Ω–∞", "kz": "–ê–π–¥–∞–Ω–∞ “ö–∞–±–∏–¥—É–ª–ª–∞“õ—ã–∑—ã"},
                "class": {"ru": "–ö–∞–∑–∞—Ö—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã", "kz": "“ö–∞–∑–∞“õ —Å—ã–Ω—ã–ø—Ç–∞—Ä—ã"},
                "id": "380587668"
            },
            "dinara": {
                "name": {"ru": "–î–∏–Ω–∞—Ä–∞ –¢–∞–ª–≥–∞—Ç–æ–≤–Ω–∞", "kz": "–î–∏–Ω–∞—Ä–∞ –¢–∞–ª“ì–∞—Ç“õ—ã–∑—ã"},
                "class": {"ru": "–†—É—Å—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã", "kz": "–û—Ä—ã—Å —Å—ã–Ω—ã–ø—Ç–∞—Ä—ã"},
                "id": "740569027"
            }
        }
        self.active_dialogues = {}
        self.messages = {
            "ru": {
                "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ¬´AISezim¬ª! üåü",
                "bot_description": "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —à–∫–æ–ª—å–Ω–æ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω. –í–º–µ—Å—Ç–µ –º—ã –Ω–∞–π–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ! üí´",
                "choose_language": "–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è? üí≠",
                "choose_format": "–î–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ò–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–Ω–æ–Ω–∏–º–Ω–æ? ü§ó",
                "with_name": "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è ‚ú®",
                "anonymous": "–û—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º ",
                "enter_name": "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üåü",
                "enter_age_class": "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç, –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —É—á–∏—à—å—Å—è? üìö",
                "describe_situation": "–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—à—å –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é?",
                "choose_time": "–í –∫–∞–∫–æ–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –ø—Ä–∏–π—Ç–∏? üìÖ",
                "thanks": "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! ‚ù§Ô∏è\n{} —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! üòä",
                "choose_consultation_mode": "–ö–∞–∫ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é? üí≠",
                "offline": "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É ü§ù",
                "online": "–ü–æ–ª—É—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é üíª",
                "choose_psychologist": "–•–æ—Ä–æ—à–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è:\n\nüë©‚Äçüíº –ê–π–¥–∞–Ω–∞ –ö–∞–±–∏–¥—É–ª–ª–∞–∫—ã–∑—ã ‚Äì –ø—Å–∏—Ö–æ–ª–æ–≥ –∫–∞–∑–∞—Ö—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤\nüë©‚Äçüíº –î–∏–Ω–∞—Ä–∞ –¢–∞–ª–≥–∞—Ç–æ–≤–Ω–∞ ‚Äì –ø—Å–∏—Ö–æ–ª–æ–≥ —Ä—É—Å—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤",
                "enter_name_age": "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç, –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —É—á–∏—à—å—Å—è? üòä",
                "what_bothers": "–ö–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
                "problems": [
                    "1Ô∏è‚É£ –¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å —É—á–µ–±–æ–π –∏ –∑–∞–Ω—è—Ç–∏—è–º–∏ üìö",
                    "2Ô∏è‚É£ –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏ ü§ù",
                    "3Ô∏è‚É£ –ù–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ üè°",
                    "4Ô∏è‚É£ –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ, –ø–µ—Ä–µ–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üí≠",
                    "5Ô∏è‚É£ –ë—É–ª–ª–∏–Ω–≥/–ö–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥",
                    "6Ô∏è‚É£ –î—Ä—É–≥–æ–µ (–º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º) ‚úçÔ∏è"
                ],
                "enter_name_age": "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç, –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —É—á–∏—à—å—Å—è? üòä",
                "use_end": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
                "dialog_not_started": "–î–∏–∞–ª–æ–≥ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.",
                "dialog_ended": "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.",
                "psychologist_accepted": "‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥ –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è.",
                "request_postponed": "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω. –ü—Å–∏—Ö–æ–ª–æ–≥ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ–∑–∂–µ.",
                "select_button": "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–≥–æ –¥–ª—è –≤–∞—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ ‚¨áÔ∏è",
            },
            "kz": {
                "welcome": "¬´AISezim¬ª –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ “õ–æ–ª–¥–∞—É “õ—ã–∑–º–µ—Ç—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£! üåü",
                "bot_description": "–ú–µ–Ω —Å–∞“ì–∞–Ω –º–µ–∫—Ç–µ–ø –ø—Å–∏—Ö–æ–ª–æ–≥—ã–Ω–∞ –æ–Ω–ª–∞–π–Ω –Ω–µ–º–µ—Å–µ –æ—Ñ–ª–∞–π–Ω –∂–∞–∑—ã–ª—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω. –ë—ñ—Ä–≥–µ —à–µ—à—ñ–º —Ç–∞–±–∞–º—ã–∑! üí´",
                "choose_language": "“ö–∞–π —Ç—ñ–ª–¥–µ —Å”©–π–ª–µ—Å–∫—ñ“£ –∫–µ–ª–µ–¥—ñ? üí≠",
                "choose_format": "–ê–ª–¥—ã–º–µ–Ω —Ç–∞–Ω—ã—Å—ã–ø –∞–ª–∞–π—ã“õ! ”ò–ª–¥–µ —Å“±—Ä–∞“ì—ã“£–¥—ã –∞–Ω–æ–Ω–∏–º–¥—ñ —Ç“Ø—Ä–¥–µ “õ–æ–π“ì—ã“£ –∫–µ–ª–µ –º–µ? ü§ó",
                "with_name": "–¢–∞–Ω—ã—Å—Ç—ã—Ä—É ‚ú®",
                "anonymous": "–ê–Ω–æ–Ω–∏–º–¥—ñ “õ–∞–ª—É ",
                "enter_name": "–°–µ–Ω—ñ“£ –µ—Å—ñ–º—ñ“£ –∫—ñ–º? üåü",
                "enter_age_class": "–ñ–∞—Å—ã“£ –Ω–µ—à–µ–¥–µ, –Ω–µ—à—ñ–Ω—à—ñ —Å—ã–Ω—ã–ø—Ç–∞ –æ“õ–∏—Å—ã“£? üìö",
                "describe_situation": "–ñ–∞“õ—Å—ã, –∂–∞“ì–¥–∞–π–¥—ã “õ—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞–ø –±–µ—Ä–µ –∞–ª–∞—Å—ã“£ –±–∞?",
                "choose_time": "–°–∞“ì–∞–Ω “õ–∞–π –∫“Ø–Ω—ñ, “õ–∞–π —É–∞“õ—ã—Ç—Ç–∞ –∫–µ–ª—É —ã“£“ì–∞–π–ª—ã –±–æ–ª–∞–¥—ã? üìÖ",
                "thanks": "–°–µ–Ω—ñ–º—ñ“£ “Ø—à—ñ–Ω —Ä–∞“õ–º–µ—Ç! ‚ù§Ô∏è\n{} —Å–µ–Ω—ñ–º–µ–Ω –∂–∞“õ—ã–Ω –∞—Ä–∞–¥–∞ –±–∞–π–ª–∞–Ω—ã—Å–∞–¥—ã. –ï–≥–µ—Ä —Ç–∞“ì—ã –¥–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£ –±–æ–ª—Å–∞, –∫–µ–∑ –∫–µ–ª–≥–µ–Ω —É–∞“õ—ã—Ç—Ç–∞ –∂–∞–∑–∞ –∞–ª–∞—Å—ã“£! üòä",
                "choose_consultation_mode": "–ö–µ“£–µ—Å—Ç—ñ “õ–∞–ª–∞–π –∞–ª“ì—ã“£ –∫–µ–ª–µ–¥—ñ? üí≠",
                "offline": "–ñ–µ–∫–µ –∫–µ–∑–¥–µ—Å—É–≥–µ –∂–∞–∑—ã–ª—É ü§ù",
                "online": "–û–Ω–ª–∞–π–Ω –∫–µ“£–µ—Å –∞–ª—É üíª",
                "choose_psychologist": "–ñ–∞“õ—Å—ã!\n\n”®–∑—ñ“£ –æ“õ–∏—Ç—ã–Ω —Å—ã–Ω—ã–±—ã–Ω–∞ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥ –º–∞–º–∞–Ω—ã“£ —Ç–∞“£–¥–∞:\n\nüë©‚Äçüíº –ê–π–¥–∞–Ω–∞ “ö–∞–±–∏–¥—É–ª–ª–∞“õ—ã–∑—ã ‚Äì “õ–∞–∑–∞“õ —Å—ã–Ω—ã–ø—Ç–∞—Ä—ã–Ω—ã“£ –ø—Å–∏—Ö–æ–ª–æ–≥—ã\nüë©‚Äçüíº –î–∏–Ω–∞—Ä–∞ –¢–∞–ª“ì–∞—Ç“õ—ã–∑—ã ‚Äì –æ—Ä—ã—Å —Å—ã–Ω—ã–ø—Ç–∞—Ä—ã–Ω—ã“£ –ø—Å–∏—Ö–æ–ª–æ–≥—ã",
                "enter_name_age": "”®—Ç—ñ–Ω–µ–º—ñ–Ω, –µ—Å—ñ–º—ñ“£ –º–µ–Ω –∂–∞—Å—ã“£–¥—ã –∂–∞–∑:",
                "what_bothers": "–°–µ–Ω—ñ “õ–∞–Ω–¥–∞–π –º”ô—Å–µ–ª–µ –º–∞–∑–∞–ª–∞–π–¥—ã?",
                "problems": [
                    "1Ô∏è‚É£ –û“õ—É –º–µ–Ω —Å–∞–±–∞“õ—Ç–∞—Ä“ì–∞ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã “õ–∏—ã–Ω–¥—ã“õ—Ç–∞—Ä üìö",
                    "2Ô∏è‚É£ –î–æ—Å—Ç–∞—Ä—ã–º–º–µ–Ω –Ω–µ–º–µ—Å–µ —Å—ã–Ω—ã–ø—Ç–∞—Å—Ç–∞—Ä—ã–º–º–µ–Ω “õ–∞—Ä—ã–º-“õ–∞—Ç—ã–Ω–∞—Å ü§ù",
                    "3Ô∏è‚É£ –ê—Ç–∞-–∞–Ω–∞–º–º–µ–Ω —Ç“Ø—Å—ñ–Ω—ñ—Å–ø–µ—É—à—ñ–ª—ñ–∫—Ç–µ—Ä üè°",
                    "4Ô∏è‚É£ ”®–∑—ñ–º–µ —Å–µ–Ω—ñ–º—Å—ñ–∑–¥—ñ–∫, –∫”©“£—ñ–ª-–∫“Ø–π—ñ–º–Ω—ñ“£ ”©–∑–≥–µ—Ä—É—ñ üí≠",
                    "5Ô∏è‚É£ –ë—É–ª–ª–∏–Ω–≥/–ö–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥",
                    "6Ô∏è‚É£ –ë–∞—Å“õ–∞ –Ω”ô—Ä—Å–µ (”©–∑—ñ“£ –∂–∞–∑–∞ –∞–ª–∞—Å—ã“£) ‚úçÔ∏è"
                ],
                "use_end": "–î–∏–∞–ª–æ–≥—Ç—ã –∞—è“õ—Ç–∞—É “Ø—à—ñ–Ω /end –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.",
                "dialog_not_started": "–î–∏–∞–ª–æ–≥ ”ô–ª—ñ –±–∞—Å—Ç–∞–ª“ì–∞–Ω –∂–æ“õ –Ω–µ–º–µ—Å–µ –∞—è“õ—Ç–∞–ª–¥—ã.\n–ñ–∞“£–∞ –¥–∏–∞–ª–æ–≥—Ç—ã –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω /start “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.",
                "dialog_ended": "–î–∏–∞–ª–æ–≥ –∞—è“õ—Ç–∞–ª–¥—ã. ”®—Ç—ñ–Ω—ñ—à –±–µ—Ä–≥–µ–Ω—ñ“£—ñ–∑ “Ø—à—ñ–Ω —Ä–∞—Ö–º–µ—Ç!\n–ñ–∞“£–∞ –¥–∏–∞–ª–æ–≥—Ç—ã –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω /start “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.",
                "psychologist_accepted": "‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥ —Å—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑–¥—ñ “õ–∞–±—ã–ª–¥–∞–¥—ã. –ï–Ω–¥—ñ —Å”©–π–ª–µ—Å–µ –∞–ª–∞—Å—ã–∑.",
                "request_postponed": "‚è≥ –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ —É–∞“õ—ã—Ç—à–∞ –∫–µ–π—ñ–Ω–≥–µ “õ–∞–ª–¥—ã—Ä—ã–ª–¥—ã. –ü—Å–∏—Ö–æ–ª–æ–≥ —Å—ñ–∑–±–µ–Ω –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ –±–∞–π–ª–∞–Ω—ã—Å–∞–¥—ã.",
                "select_button": "”®–∑—ñ“£–µ —ã“£“ì–∞–π–ª—ã –º–∞–º–∞–Ω–¥—ã —Ç–∞“£–¥–∞ ‚¨áÔ∏è",
            }
        }

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start the conversation and ask for language preference."""
        context.user_data.clear()
        
        keyboard = [
            [
                InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz"),
                InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "–°”ô–ª–µ–º! ¬´AISezim¬ª “õ–æ—Å—ã–º—à–∞—Å—ã–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£! –ú–µ–Ω ‚Äì –º–µ–∫—Ç–µ–ø –ø—Å–∏—Ö–æ–ª–æ–≥—ã–Ω—ã“£ –∫”©–º–µ–∫—à—ñ —á–∞—Ç-–±–æ—Ç—ã–º—ã–Ω. "
            "–°–µ–Ω—ñ“£ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ–ø, –º–µ–∫—Ç–µ–ø –ø—Å–∏—Ö–æ–ª–æ–≥—ã–Ω–∞ –∂–∞–∑—ã–ª—É—ã“£–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω ‚ú®\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´AISezim¬ª! –Ø ‚Äì –ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞. "
            "–ü–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ‚ú®"
        )
        
        await update.message.reply_text(
            "“ö–∞–π —Ç—ñ–ª–¥–µ —Å”©–π–ª–µ—Å–∫—ñ“£ –∫–µ–ª–µ–¥—ñ? / –ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º? üí≠",
            reply_markup=reply_markup
        )
        return CHOOSING_LANGUAGE

    async def choose_language(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle language selection."""
        query = update.callback_query
        await query.answer()
        
        language = query.data.split('_')[1]
        context.user_data['language'] = language
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞
        keyboard = [
            [
                InlineKeyboardButton(
                    f"{self.psychologists['aidana']['name'][language]}",
                    callback_data="psych_aidana"
                )
            ],
            [
                InlineKeyboardButton(
                    f"{self.psychologists['dinara']['name'][language]}",
                    callback_data="psych_dinara"
                )
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await query.message.edit_text(
            text=self.messages[language]["choose_psychologist"],
            reply_markup=reply_markup
        )

        return CHOOSING_PSYCHOLOGIST

    async def choose_psychologist(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle psychologist selection."""
        query = update.callback_query
        await query.answer()
        
        language = context.user_data['language']
        psychologist_id = query.data.split('_')[1]
        context.user_data['psychologist'] = self.psychologists[psychologist_id]
        
        keyboard = [
            [self.messages[language]["offline"]],
            [self.messages[language]["online"]]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=self.messages[language]["choose_consultation_mode"],
            reply_markup=reply_markup
        )
        return CHOOSING_CONSULTATION_MODE

    async def choose_consultation_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        language = context.user_data['language']
        text = update.message.text
        context.user_data['consultation_mode'] = text
        
        if text == self.messages[language]["offline"]:
            await update.message.reply_text(
                self.messages[language]["enter_name"],
                reply_markup=ReplyKeyboardRemove()
            )
            return ENTER_NAME
        else:
            keyboard = [
                [self.messages[language]["anonymous"]],
                [self.messages[language]["with_name"]]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                self.messages[language]["choose_format"],
                reply_markup=reply_markup
            )
            return CHOOSING_FORMAT

    async def choose_format(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle format selection."""
        language = context.user_data['language']
        text = update.message.text

        if text == self.messages[language]["with_name"]:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è
            await update.message.reply_text(
                self.messages[language]["enter_name"],
                reply_markup=ReplyKeyboardRemove()
            )
            return ENTER_NAME
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å
            context.user_data['name'] = "–ê–Ω–æ–Ω–∏–º" if language == "ru" else "–ê–Ω–æ–Ω–∏–º–¥—ñ"
            
            # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–±–ª–µ–º—ã
            keyboard = [
                [problem] for problem in self.messages[language]["problems"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            await update.message.reply_text(
                self.messages[language]["what_bothers"],
                reply_markup=reply_markup
            )
            return CHOOSING_PROBLEM

    async def enter_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle name input."""
        language = context.user_data['language']
        context.user_data['name'] = update.message.text
        
        await update.message.reply_text(
            self.messages[language]["enter_age_class"],
            reply_markup=ReplyKeyboardRemove()
        )
        return ENTER_AGE_CLASS

    async def enter_age_class(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle age and class input."""
        language = context.user_data['language']
        context.user_data['age_class'] = update.message.text
        
        keyboard = []
        for problem in self.messages[language]["problems"]:
            keyboard.append([problem])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        
        await update.message.reply_text(
            self.messages[language]["what_bothers"],
            reply_markup=reply_markup
        )
        return CHOOSING_PROBLEM

    async def choose_problem(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        language = context.user_data['language']
        context.user_data['problem'] = update.message.text
        await update.message.reply_text(
            self.messages[language]["describe_situation"],
            reply_markup=ReplyKeyboardRemove()
        )
        return ENTERING_PROBLEM_DETAILS

    async def enter_problem_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        language = context.user_data['language']
        context.user_data['problem_details'] = update.message.text
        
        if context.user_data['consultation_mode'] == self.messages[language]["offline"]:
            await update.message.reply_text(
                self.messages[language]["choose_time"]
            )
            return CHOOSING_TIME
        else:
            return await self.finish_conversation(update, context)

    async def choose_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['preferred_time'] = update.message.text
        return await self.finish_conversation(update, context)

    async def finish_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        language = context.user_data['language']
        psychologist = context.user_data['psychologist']
        client_id = update.effective_user.id

        message = (
            f"–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n"
            f"–¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {context.user_data.get('consultation_mode')}\n"
            f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {context.user_data.get('name', '–ê–Ω–æ–Ω–∏–º')}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç/–∫–ª–∞—Å—Å: {context.user_data.get('age_class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {context.user_data.get('problem')}\n"
            f"–î–µ—Ç–∞–ª–∏: {context.user_data.get('problem_details')}\n"
            f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {context.user_data.get('preferred_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"ID –∫–ª–∏–µ–Ω—Ç–∞: {client_id}"
        )

        keyboard = [
            [
                InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{client_id}"),
                InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"postpone_{client_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await context.bot.send_message(
                chat_id=psychologist['id'],
                text=message,
                reply_markup=reply_markup
            )
            self.active_dialogues[client_id] = {
                'psychologist_id': psychologist['id'],
                'state': 'pending'
            }
            await update.message.reply_text(
                self.messages[language]['thanks'].format(psychologist['name'][language])
            )
        except Exception as e:
            logging.error(f"Failed to send message to psychologist: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." if language == "ru" else
                "–ü—Å–∏—Ö–æ–ª–æ–≥“õ–∞ —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑."
            )
            return ConversationHandler.END

        return IN_DIALOGUE

    async def accept_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        client_id = int(query.data.split("_")[1])
        
        if client_id in self.active_dialogues:
            self.active_dialogues[client_id]['state'] = 'active'
            
            await context.bot.edit_message_reply_markup(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                reply_markup=None
            )
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (–≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚úÖ –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞
            client_language = "ru"
            for dialogue_data in self.active_dialogues.values():
                if dialogue_data.get('psychologist_id') == str(query.message.chat_id):
                    client_language = dialogue_data.get('language', 'ru')
                    break

            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
            client_messages = {
                "ru": "‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥ –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è.",
                "kz": "‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥ —Å—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑–¥—ñ “õ–∞–±—ã–ª–¥–∞–¥—ã. –ï–Ω–¥—ñ —Å”©–π–ª–µ—Å–µ –∞–ª–∞—Å—ã–∑."
            }

            await context.bot.send_message(
                chat_id=client_id,
                text=client_messages[client_language]
            )

    async def postpone_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        client_id = int(query.data.split("_")[1])
        
        await context.bot.edit_message_reply_markup(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            reply_markup=None
        )
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (–≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ª–æ–∂–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É –ø–æ–∑–∂–µ."
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞
        client_language = "ru"
        if client_id in self.active_dialogues:
            client_language = self.active_dialogues[client_id].get('language', 'ru')

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        client_messages = {
            "ru": "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω. –ü—Å–∏—Ö–æ–ª–æ–≥ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ–∑–∂–µ.",
            "kz": "‚è≥ –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ —É–∞“õ—ã—Ç—à–∞ –∫–µ–π—ñ–Ω–≥–µ “õ–∞–ª–¥—ã—Ä—ã–ª–¥—ã. –ü—Å–∏—Ö–æ–ª–æ–≥ —Å—ñ–∑–±–µ–Ω –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ –±–∞–π–ª–∞–Ω—ã—Å–∞–¥—ã."
        }

        await context.bot.send_message(
            chat_id=client_id,
            text=client_messages[client_language]
        )

    async def end_dialogue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle the /end command - only available for psychologists."""
        user_id = update.effective_user.id
        language = context.user_data.get('language', 'ru')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º
        is_psychologist = str(user_id) in [p['id'] for p in self.psychologists.values()]
        
        if is_psychologist:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Å–∏—Ö–æ–ª–æ–≥, –ø–æ–∑–≤–æ–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
            for client_id, dialogue in self.active_dialogues.items():
                if dialogue['psychologist_id'] == str(user_id):
                    await self.close_dialogue(context, client_id, str(user_id), language)
            return ConversationHandler.END
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            await update.message.reply_text(
                "–î–∏–∞–ª–æ–≥ –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Å–∏—Ö–æ–ª–æ–≥." if language == "ru" else 
                "–î–∏–∞–ª–æ–≥—Ç—ã —Ç–µ–∫ –ø—Å–∏—Ö–æ–ª–æ–≥ “õ–∞–Ω–∞ –∞—è“õ—Ç–∞–π –∞–ª–∞–¥—ã."
            )
            return IN_DIALOGUE

    async def close_dialogue(self, context, client_id, psychologist_id, language):
        if client_id in self.active_dialogues:
            del self.active_dialogues[client_id]
            
            await context.bot.send_message(
                chat_id=client_id,
                text=self.messages[language]["dialog_ended"]
            )
            await context.bot.send_message(
                chat_id=psychologist_id,
                text=f"–î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_id} –∑–∞–≤–µ—Ä—à–µ–Ω."
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message_text = update.message.text
        language = context.user_data.get('language', 'ru')

        if message_text.startswith('/'):
            return

        is_psychologist = str(user_id) in [p['id'] for p in self.psychologists.values()]

        if is_psychologist:
            active_client = None
            for client_id, dialogue in self.active_dialogues.items():
                if dialogue['psychologist_id'] == str(user_id) and dialogue['state'] == 'active':
                    active_client = client_id
                    break
                    
            if active_client:
                await context.bot.send_message(
                    chat_id=active_client,
                    text=f"–ü—Å–∏—Ö–æ–ª–æ–≥: {message_text}"
                )
            else:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.\n"
                    "–ü—Ä–∏–º–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥."
                )
        else:
            if user_id in self.active_dialogues and self.active_dialogues[user_id]['state'] == 'active':
                psychologist_id = self.active_dialogues[user_id]['psychologist_id']
                await context.bot.send_message(
                    chat_id=psychologist_id,
                    text=f"–ö–ª–∏–µ–Ω—Ç {user_id}: {message_text}"
                )
            else:
                await update.message.reply_text(
                    self.messages[language]["dialog_not_started"]
                )

def main():
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    bot = ClientBot()
    application = Application.builder().token("7237993689:AAGBApQLWmhf1lOXTdERXn0n7VfHRdPd7xk").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', bot.start)],
        states={
            CHOOSING_LANGUAGE: [
                CallbackQueryHandler(bot.choose_language, pattern="^lang_")
            ],
            CHOOSING_PSYCHOLOGIST: [
                CallbackQueryHandler(bot.choose_psychologist, pattern="^psych_")
            ],
            CHOOSING_CONSULTATION_MODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.choose_consultation_mode)
            ],
            CHOOSING_FORMAT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.choose_format)
            ],
            ENTER_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.enter_name)
            ],
            ENTER_AGE_CLASS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.enter_age_class)
            ],
            CHOOSING_PROBLEM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.choose_problem)
            ],
            ENTERING_PROBLEM_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.enter_problem_details)
            ],
            CHOOSING_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.choose_time)
            ],
            IN_DIALOGUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message)
            ]
        },
        fallbacks=[CommandHandler('end', bot.end_dialogue)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(bot.accept_request, pattern="^accept_"))
    application.add_handler(CallbackQueryHandler(bot.postpone_request, pattern="^postpone_"))
    application.add_handler(CommandHandler('end', bot.end_dialogue))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()