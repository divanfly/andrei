import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    CHOOSING_FORMAT,
    CHOOSING_CONSULTATION_MODE,
    ENTER_NAME,
    ENTER_AGE_CLASS,
    CHOOSING_PROBLEM,
    ENTERING_PROBLEM_DETAILS,
    CHOOSING_TIME,
    IN_DIALOGUE,
) = range(8)

class ClientBot:
    def __init__(self):
        self.psychologist = {
            "name": "–ê–π–¥–∞–Ω–∞ “ö–∞–±–∏–¥—É–ª–ª–∞“õ—ã–∑—ã",
            "class": "“ö–∞–∑–∞“õ —Å—ã–Ω—ã–ø—Ç–∞—Ä—ã",
            "id": "380587668"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞
        }
        self.active_dialogues = {}
        self.messages = {
            "welcome": "¬´ALandama¬ª –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ “õ–æ–ª–¥–∞—É “õ—ã–∑–º–µ—Ç—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£! üåü",
            "bot_description": "–ú–µ–Ω —Å–∞“ì–∞–Ω –º–µ–∫—Ç–µ–ø –ø—Å–∏—Ö–æ–ª–æ–≥—ã–Ω–∞ –æ–Ω–ª–∞–π–Ω –Ω–µ–º–µ—Å–µ –æ—Ñ–ª–∞–π–Ω –∂–∞–∑—ã–ª—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω. –ë—ñ—Ä–≥–µ —à–µ—à—ñ–º —Ç–∞–±–∞–º—ã–∑! üí´",
            "choose_format": "–ê–ª–¥—ã–º–µ–Ω —Ç–∞–Ω—ã—Å—ã–ø –∞–ª–∞–π—ã“õ! ”ò–ª–¥–µ —Å“±—Ä–∞“ì—ã“£–¥—ã –∞–Ω–æ–Ω–∏–º–¥—ñ —Ç“Ø—Ä–¥–µ “õ–æ–π“ì—ã“£ –∫–µ–ª–µ –º–µ? ü§ó",
            "with_name": "–¢–∞–Ω—ã—Å—Ç—ã—Ä—É ‚ú®",
            "anonymous": "–ê–Ω–æ–Ω–∏–º–¥—ñ “õ–∞–ª—É ",
            "enter_name": "–ê–ª–¥—ã–º–µ–Ω —Ç–∞–Ω—ã—Å—ã–ø –∞–ª–∞–π—ã“õ! –°–µ–Ω—ñ“£ –µ—Å—ñ–º—ñ“£ –∫—ñ–º? üåü",
            "enter_age_class": "–ñ–∞—Å—ã“£ –Ω–µ—à–µ–¥–µ, –Ω–µ—à—ñ–Ω—à—ñ —Å—ã–Ω—ã–ø—Ç–∞ –æ“õ–∏—Å—ã“£? üìö",
            "describe_situation": "–ñ–∞“õ—Å—ã, –∂–∞“ì–¥–∞–π–¥—ã “õ—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞–ø –±–µ—Ä–µ –∞–ª–∞—Å—ã“£ –±–∞?",
            "choose_time": "–°–∞“ì–∞–Ω “õ–∞–π –∫“Ø–Ω—ñ, “õ–∞–π —É–∞“õ—ã—Ç—Ç–∞ –∫–µ–ª—É —ã“£“ì–∞–π–ª—ã –±–æ–ª–∞–¥—ã? üìÖ",
            "thanks": "–°–µ–Ω—ñ–º—ñ“£ “Ø—à—ñ–Ω —Ä–∞“õ–º–µ—Ç! ‚ù§Ô∏è\n{} —Å–µ–Ω—ñ–º–µ–Ω –∂–∞“õ—ã–Ω –∞—Ä–∞–¥–∞ –±–∞–π–ª–∞–Ω—ã—Å–∞–¥—ã. –ï–≥–µ—Ä —Ç–∞“ì—ã –¥–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£ –±–æ–ª—Å–∞, –∫–µ–∑ –∫–µ–ª–≥–µ–Ω —É–∞“õ—ã—Ç—Ç–∞ –∂–∞–∑–∞ –∞–ª–∞—Å—ã“£! üòä",
            "choose_consultation_mode": "–ö–µ“£–µ—Å—Ç—ñ “õ–∞–ª–∞–π –∞–ª“ì—ã“£ –∫–µ–ª–µ–¥—ñ? üí≠",
            "offline": "–ñ–µ–∫–µ –∫–µ–∑–¥–µ—Å—É–≥–µ –∂–∞–∑—ã–ª—É ü§ù",
            "online": "–û–Ω–ª–∞–π–Ω –∫–µ“£–µ—Å –∞–ª—É üíª",
            "what_bothers": "–°–µ–Ω—ñ “õ–∞–Ω–¥–∞–π –º”ô—Å–µ–ª–µ –º–∞–∑–∞–ª–∞–π–¥—ã?",
            "problems": [
                "1Ô∏è‚É£ –û“õ—É –º–µ–Ω —Å–∞–±–∞“õ—Ç–∞—Ä“ì–∞ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã “õ–∏—ã–Ω–¥—ã“õ—Ç–∞—Ä üìö",
                "2Ô∏è‚É£ –î–æ—Å—Ç–∞—Ä—ã–º–º–µ–Ω –Ω–µ–º–µ—Å–µ —Å—ã–Ω—ã–ø—Ç–∞—Å—Ç–∞—Ä—ã–º–º–µ–Ω “õ–∞—Ä—ã–º-“õ–∞—Ç—ã–Ω–∞—Å ü§ù",
                "3Ô∏è‚É£ –ê—Ç–∞-–∞–Ω–∞–º–º–µ–Ω —Ç“Ø—Å—ñ–Ω—ñ—Å–ø–µ—É—à—ñ–ª—ñ–∫—Ç–µ—Ä üè°",
                "4Ô∏è‚É£ ”®–∑—ñ–º–µ —Å–µ–Ω—ñ–º—Å—ñ–∑–¥—ñ–∫, –∫”©“£—ñ–ª-–∫“Ø–π—ñ–º–Ω—ñ“£ ”©–∑–≥–µ—Ä—É—ñ üí≠",
                "5Ô∏è‚É£ –ë—É–ª–ª–∏–Ω–≥/–ö–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥",
                "6Ô∏è‚É£ –ë–∞—Å“õ–∞ –Ω”ô—Ä—Å–µ (”©–∑—ñ“£ –∂–∞–∑–∞ –∞–ª–∞—Å—ã“£) ‚úçÔ∏è"
            ],
            "use_end": "–î–∏–∞–ª–æ–≥—Ç—ã –∞—è“õ—Ç–∞—É “Ø—à—ñ–Ω /end –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.",
            "dialog_not_started": "–î–∏–∞–ª–æ–≥ ”ô–ª—ñ –±–∞—Å—Ç–∞–ª“ì–∞–Ω –∂–æ“õ –Ω–µ–º–µ—Å–µ –∞—è“õ—Ç–∞–ª–¥—ã.\n–ñ–∞“£–∞ –¥–∏–∞–ª–æ–≥—Ç—ã –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω /start “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.",
            "dialog_ended": "–î–∏–∞–ª–æ–≥ –∞—è“õ—Ç–∞–ª–¥—ã. ”®—Ç—ñ–Ω—ñ—à –±–µ—Ä–≥–µ–Ω—ñ“£—ñ–∑ “Ø—à—ñ–Ω —Ä–∞—Ö–º–µ—Ç!\n–ñ–∞“£–∞ –¥–∏–∞–ª–æ–≥—Ç—ã –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω /start “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.",
            "psychologist_accepted": "‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥ —Å—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑–¥—ñ “õ–∞–±—ã–ª–¥–∞–¥—ã. –ï–Ω–¥—ñ —Å”©–π–ª–µ—Å–µ –∞–ª–∞—Å—ã–∑.",
            "request_postponed": "‚è≥ –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ —É–∞“õ—ã—Ç—à–∞ –∫–µ–π—ñ–Ω–≥–µ “õ–∞–ª–¥—ã—Ä—ã–ª–¥—ã. –ü—Å–∏—Ö–æ–ª–æ–≥ —Å—ñ–∑–±–µ–Ω –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ –±–∞–π–ª–∞–Ω—ã—Å–∞–¥—ã."
        }

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start the conversation."""
        context.user_data.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        keyboard = [
            [self.messages["offline"]],
            [self.messages["online"]]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            "–°”ô–ª–µ–º! ¬´ALandama¬ª “õ–æ—Å—ã–º—à–∞—Å—ã–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£! –ú–µ–Ω ‚Äì –º–µ–∫—Ç–µ–ø –ø—Å–∏—Ö–æ–ª–æ–≥—ã–Ω—ã“£ –∫”©–º–µ–∫—à—ñ —á–∞—Ç-–±–æ—Ç—ã–º—ã–Ω. "
            "–°–µ–Ω—ñ“£ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ–ø, –º–µ–∫—Ç–µ–ø –ø—Å–∏—Ö–æ–ª–æ–≥—ã - –ê–π–¥–∞–Ω–∞ “ö–∞–±–∏–¥—É–ª–ª–∞“õ—ã–∑—ã–Ω–∞ –∂–∞–∑—ã–ª—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω ‚ú®\n\n"
            f"{self.messages['choose_consultation_mode']}",
            reply_markup=reply_markup
        )
        return CHOOSING_CONSULTATION_MODE

    async def choose_consultation_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text
        context.user_data['consultation_mode'] = text
        
        if text == self.messages["offline"]:
            await update.message.reply_text(
                self.messages["enter_name"],
                reply_markup=ReplyKeyboardRemove()
            )
            return ENTER_NAME
        else:
            keyboard = [
                [self.messages["anonymous"]],
                [self.messages["with_name"]]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                self.messages["choose_format"],
                reply_markup=reply_markup
            )
            return CHOOSING_FORMAT

    async def choose_format(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle format selection."""
        text = update.message.text

        if text == self.messages["with_name"]:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è
            await update.message.reply_text(
                self.messages["enter_name"],
                reply_markup=ReplyKeyboardRemove()
            )
            return ENTER_NAME
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å
            context.user_data['name'] = "–ê–Ω–æ–Ω–∏–º–¥—ñ"
            
            # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–±–ª–µ–º—ã
            keyboard = [
                [problem] for problem in self.messages["problems"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            await update.message.reply_text(
                self.messages["what_bothers"],
                reply_markup=reply_markup
            )
            return CHOOSING_PROBLEM

    async def enter_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle name input."""
        context.user_data['name'] = update.message.text
        
        await update.message.reply_text(
            self.messages["enter_age_class"],
            reply_markup=ReplyKeyboardRemove()
        )
        return ENTER_AGE_CLASS

    async def enter_age_class(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle age and class input."""
        context.user_data['age_class'] = update.message.text
        
        keyboard = []
        for problem in self.messages["problems"]:
            keyboard.append([problem])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        
        await update.message.reply_text(
            self.messages["what_bothers"],
            reply_markup=reply_markup
        )
        return CHOOSING_PROBLEM

    async def choose_problem(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['problem'] = update.message.text
        await update.message.reply_text(
            self.messages["describe_situation"],
            reply_markup=ReplyKeyboardRemove()
        )
        return ENTERING_PROBLEM_DETAILS

    async def enter_problem_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['problem_details'] = update.message.text
        
        if context.user_data['consultation_mode'] == self.messages["offline"]:
            await update.message.reply_text(
                self.messages["choose_time"]
            )
            return CHOOSING_TIME
        else:
            return await self.finish_conversation(update, context)

    async def choose_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['preferred_time'] = update.message.text
        return await self.finish_conversation(update, context)

    async def finish_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        client_id = update.effective_user.id

        message = (
            f"–ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à!\n\n"
            f"–ö–µ“£–µ—Å —Ç“Ø—Ä—ñ: {context.user_data.get('consultation_mode')}\n"
            f"–û“õ—É—à—ã–Ω—ã“£ –∞—Ç—ã: {context.user_data.get('name', '–ê–Ω–æ–Ω–∏–º–¥—ñ')}\n"
            f"–ñ–∞—Å—ã/—Å—ã–Ω—ã–±—ã: {context.user_data.get('age_class', '–ö”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω')}\n"
            f"–ú”ô—Å–µ–ª–µ —Ç“Ø—Ä—ñ: {context.user_data.get('problem')}\n"
            f"–¢–æ–ª—ã“ì—ã—Ä–∞“õ: {context.user_data.get('problem_details')}\n"
            f"–´“£“ì–∞–π–ª—ã —É–∞“õ—ã—Ç—ã: {context.user_data.get('preferred_time', '–ö”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω')}\n"
            f"–û“õ—É—à—ã–Ω—ã“£ ID: {client_id}"
        )

        keyboard = [
            [
                InlineKeyboardButton("“ö–∞–±—ã–ª–¥–∞—É", callback_data=f"accept_{client_id}"),
                InlineKeyboardButton("–ö–µ–π—ñ–Ω–≥–µ “õ–∞–ª–¥—ã—Ä—É", callback_data=f"postpone_{client_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await context.bot.send_message(
                chat_id=self.psychologist['id'],
                text=message,
                reply_markup=reply_markup
            )
            self.active_dialogues[client_id] = {
                'psychologist_id': self.psychologist['id'],
                'state': 'pending'
            }
            await update.message.reply_text(
                self.messages['thanks'].format(self.psychologist['name'])
            )
        except Exception as e:
            logging.error(f"Failed to send message to psychologist: {e}")
            await update.message.reply_text(
                "–ü—Å–∏—Ö–æ–ª–æ–≥“õ–∞ —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑."
            )
            return ConversationHandler.END

        return IN_DIALOGUE

    async def accept_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        client_id = int(query.data.split("_")[1])
        
        if client_id in self.active_dialogues:
            self.active_dialogues[client_id]['state'] = 'active'
            
            await context.bot.edit_message_reply_markup(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                reply_markup=None
            )
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚úÖ –î–∏–∞–ª–æ–≥ –±–∞—Å—Ç–∞–ª–¥—ã. –î–∏–∞–ª–æ–≥—Ç—ã –∞—è“õ—Ç–∞—É “Ø—à—ñ–Ω /end “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑."
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            await context.bot.send_message(
                chat_id=client_id,
                text=self.messages["psychologist_accepted"]
            )

    async def postpone_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        client_id = int(query.data.split("_")[1])
        
        await context.bot.edit_message_reply_markup(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            reply_markup=None
        )
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚è≥ ”®—Ç—ñ–Ω—ñ—à –∫–µ–π—ñ–Ω–≥–µ “õ–∞–ª–¥—ã—Ä—ã–ª–¥—ã. –û“ì–∞–Ω –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ –æ—Ä–∞–ª–∞ –∞–ª–∞—Å—ã–∑."
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        await context.bot.send_message(
            chat_id=client_id,
            text=self.messages["request_postponed"]
        )

    async def end_dialogue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle the /end command - only available for psychologists."""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º
        is_psychologist = str(user_id) == self.psychologist['id']
        
        if is_psychologist:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Å–∏—Ö–æ–ª–æ–≥, –ø–æ–∑–≤–æ–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
            for client_id, dialogue in self.active_dialogues.items():
                if dialogue['psychologist_id'] == str(user_id):
                    await self.close_dialogue(context, client_id, str(user_id))
            return ConversationHandler.END
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            await update.message.reply_text(
                "–î–∏–∞–ª–æ–≥—Ç—ã —Ç–µ–∫ –ø—Å–∏—Ö–æ–ª–æ–≥ “õ–∞–Ω–∞ –∞—è“õ—Ç–∞–π –∞–ª–∞–¥—ã."
            )
            return IN_DIALOGUE

    async def close_dialogue(self, context, client_id, psychologist_id):
        if client_id in self.active_dialogues:
            del self.active_dialogues[client_id]
            
            await context.bot.send_message(
                chat_id=client_id,
                text=self.messages["dialog_ended"]
            )
            await context.bot.send_message(
                chat_id=psychologist_id,
                text=f"–û“õ—É—à—ã–º–µ–Ω –¥–∏–∞–ª–æ–≥ –∞—è“õ—Ç–∞–ª–¥—ã {client_id}."
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message_text = update.message.text

        if message_text.startswith('/'):
            return

        is_psychologist = str(user_id) == self.psychologist['id']

        if is_psychologist:
            active_client = None
            for client_id, dialogue in self.active_dialogues.items():
                if dialogue['psychologist_id'] == str(user_id) and dialogue['state'] == 'active':
                    active_client = client_id
                    break
                    
            if active_client:
                await context.bot.send_message(
                    chat_id=active_client,
                    text=f"–ü—Å–∏—Ö–æ–ª–æ–≥: {message_text}"
                )
            else:
                await update.message.reply_text(
                    "–û“õ—É—à—ã–ª–∞—Ä–º–µ–Ω –±–µ–ª—Å–µ–Ω–¥—ñ –¥–∏–∞–ª–æ–≥—Ç–∞—Ä –∂–æ“õ.\n"
                    "–î–∏–∞–ª–æ–≥—Ç—ã –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω –æ“õ—É—à—ã–Ω—ã“£ ”©—Ç—ñ–Ω—ñ—à—ñ–Ω “õ–∞–±—ã–ª–¥–∞“£—ã–∑."
                )
        else:
            if user_id in self.active_dialogues and self.active_dialogues[user_id]['state'] == 'active':
                psychologist_id = self.active_dialogues[user_id]['psychologist_id']
                await context.bot.send_message(
                    chat_id=psychologist_id,
                    text=f"–û“õ—É—à—ã {user_id}: {message_text}"
                )
            else:
                await update.message.reply_text(
                    self.messages["dialog_not_started"]
                )

def main():
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    bot = ClientBot()
    application = Application.builder().token("8069846201:AAGkz7v0imc9Er_mxd3FT_X2Eu_cg3rADa4").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', bot.start)],
        states={
            CHOOSING_CONSULTATION_MODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.choose_consultation_mode)
            ],
            CHOOSING_FORMAT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.choose_format)
            ],
            ENTER_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.enter_name)
            ],
            ENTER_AGE_CLASS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.enter_age_class)
            ],
            CHOOSING_PROBLEM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.choose_problem)
            ],
            ENTERING_PROBLEM_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.enter_problem_details)
            ],
            CHOOSING_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.choose_time)
            ],
            IN_DIALOGUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message)
            ]
        },
        fallbacks=[CommandHandler('end', bot.end_dialogue)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(bot.accept_request, pattern="^accept_"))
    application.add_handler(CallbackQueryHandler(bot.postpone_request, pattern="^postpone_"))
    application.add_handler(CommandHandler('end', bot.end_dialogue))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))

    print("–ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
